{"version":3,"sources":["../src/utils/cn.ts","../src/alert.tsx"],"names":["cn","classes","toneStyles","toneIcon","jsx","AlertCircle","CheckCircle2","AlertTriangle","OctagonAlert","RtwAlert","tone","title","description","className","props","jsxs"],"mappings":"6FAAO,SAASA,CAAAA,CAAAA,GAAMC,CAAAA,CAAmD,CACvE,OAAOA,CAAAA,CAAQ,MAAA,CAAO,OAAO,CAAA,CAAE,IAAA,CAAK,GAAG,CACzC,CCYA,IAAMC,CAAAA,CAAwC,CAC5C,IAAA,CAAM,0GACN,OAAA,CAAS,2HAAA,CACT,OAAA,CAAS,+GAAA,CACT,WAAA,CAAa,mGACf,CAAA,CAEMC,CAAAA,CAA+C,CACnD,IAAA,CAAMC,cAAAA,CAACC,uBAAAA,CAAA,CAAY,SAAA,CAAU,SAAA,CAAU,aAAA,CAAY,MAAA,CAAO,EAC1D,OAAA,CAASD,cAAAA,CAACE,wBAAAA,CAAA,CAAa,SAAA,CAAU,SAAA,CAAU,aAAA,CAAY,MAAA,CAAO,EAC9D,OAAA,CAASF,cAAAA,CAACG,yBAAAA,CAAA,CAAc,UAAU,SAAA,CAAU,aAAA,CAAY,MAAA,CAAO,CAAA,CAC/D,YAAaH,cAAAA,CAACI,wBAAAA,CAAA,CAAa,SAAA,CAAU,SAAA,CAAU,aAAA,CAAY,MAAA,CAAO,CACpE,EAEO,SAASC,CAAAA,CAAS,CAAE,IAAA,CAAAC,CAAAA,CAAO,MAAA,CAAQ,KAAA,CAAAC,CAAAA,CAAO,YAAAC,CAAAA,CAAa,SAAA,CAAAC,CAAAA,CAAW,GAAGC,CAAM,CAAA,CAAkB,CAClG,OACEC,gBAAC,KAAA,CAAA,CACC,IAAA,CAAK,OAAA,CACL,SAAA,CAAWf,EAAG,qDAAA,CAAuDE,CAAAA,CAAWQ,CAAI,CAAA,CAAGG,CAAS,CAAA,CAC/F,GAAGC,CAAAA,CAEJ,QAAA,CAAA,CAAAV,cAAAA,CAAC,KAAA,CAAA,CAAI,SAAA,CAAU,QAAA,CAAU,SAAAD,CAAAA,CAASO,CAAI,CAAA,CAAE,CAAA,CACxCK,eAAAA,CAAC,KAAA,CAAA,CAAI,SAAA,CAAU,WAAA,CACZ,UAAAJ,CAAAA,CAAQP,cAAAA,CAAC,KAAA,CAAA,CAAI,SAAA,CAAU,uBAAA,CAAyB,QAAA,CAAAO,CAAAA,CAAM,CAAA,CAAS,KAC/DC,CAAAA,CAAcR,cAAAA,CAAC,KAAA,CAAA,CAAI,SAAA,CAAU,qBAAsB,QAAA,CAAAQ,CAAAA,CAAY,CAAA,CAAS,IAAA,CAAA,CAC3E,GACF,CAEJ","file":"alert.cjs","sourcesContent":["export function cn(...classes: Array<string | undefined | null | false>) {\n  return classes.filter(Boolean).join(\" \")\n}\n","\"use client\"\n\nimport * as React from \"react\"\nimport { AlertCircle, CheckCircle2, AlertTriangle, OctagonAlert } from 'lucide-react'\nimport { cn } from \"./utils/cn\"\n\ntype AlertTone = \"info\" | \"success\" | \"warning\" | \"destructive\"\n\nexport interface RtwAlertProps extends React.HTMLAttributes<HTMLDivElement> {\n  tone?: AlertTone\n  title?: string\n  description?: string | React.ReactNode\n}\n\nconst toneStyles: Record<AlertTone, string> = {\n  info: \"border-teal-300 bg-teal-50 text-teal-900 dark:border-teal-900/40 dark:bg-teal-950/30 dark:text-teal-200\",\n  success: \"border-emerald-300 bg-emerald-50 text-emerald-900 dark:border-emerald-900/40 dark:bg-emerald-950/30 dark:text-emerald-200\",\n  warning: \"border-amber-300 bg-amber-50 text-amber-900 dark:border-amber-900/40 dark:bg-amber-950/30 dark:text-amber-200\",\n  destructive: \"border-red-400 bg-red-50 text-red-900 dark:border-red-900/40 dark:bg-red-950/30 dark:text-red-200\"\n}\n\nconst toneIcon: Record<AlertTone, React.ReactNode> = {\n  info: <AlertCircle className=\"h-4 w-4\" aria-hidden=\"true\" />,\n  success: <CheckCircle2 className=\"h-4 w-4\" aria-hidden=\"true\" />,\n  warning: <AlertTriangle className=\"h-4 w-4\" aria-hidden=\"true\" />,\n  destructive: <OctagonAlert className=\"h-4 w-4\" aria-hidden=\"true\" />\n}\n\nexport function RtwAlert({ tone = \"info\", title, description, className, ...props }: RtwAlertProps) {\n  return (\n    <div\n      role=\"alert\"\n      className={cn(\"flex w-full items-start gap-2 rounded-md border p-3\", toneStyles[tone], className)}\n      {...props}\n    >\n      <div className=\"mt-0.5\">{toneIcon[tone]}</div>\n      <div className=\"space-y-1\">\n        {title ? <div className=\"text-sm font-semibold\">{title}</div> : null}\n        {description ? <div className=\"text-sm opacity-90\">{description}</div> : null}\n      </div>\n    </div>\n  )\n}\n"]}