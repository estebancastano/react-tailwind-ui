{"version":3,"sources":["../src/utils/cn.ts","../src/input.tsx"],"names":["cn","classes","RtwInput","n","id","label","helperText","error","className","required","props","ref","autoId","inputId","describedBy","jsxs","jsx"],"mappings":"kbAAO,SAASA,CAAAA,CAAAA,GAAMC,EAAmD,CACvE,OAAOA,CAAAA,CAAQ,MAAA,CAAO,OAAO,CAAA,CAAE,IAAA,CAAK,GAAG,CACzC,CCSO,IAAMC,EAAiBC,YAAA,CAAA,UAAA,CAC5B,CAAC,CAAE,EAAA,CAAAC,CAAAA,CAAI,KAAA,CAAAC,CAAAA,CAAO,UAAA,CAAAC,EAAY,KAAA,CAAAC,CAAAA,CAAO,SAAA,CAAAC,CAAAA,CAAW,QAAA,CAAAC,CAAAA,CAAU,GAAGC,CAAM,EAAGC,CAAAA,GAAQ,CACxE,IAAMC,CAAAA,CAAeT,YAAA,CAAA,KAAA,EAAM,CACrBU,CAAAA,CAAUT,CAAAA,EAAA,KAAAA,CAAAA,CAAMQ,CAAAA,CAChBE,CAAAA,CAAcP,CAAAA,CAAQ,CAAA,EAAGM,CAAO,CAAA,MAAA,CAAA,CAAWP,CAAAA,CAAa,GAAGO,CAAO,CAAA,KAAA,CAAA,CAAU,MAAA,CAElF,OACEE,gBAAC,KAAA,CAAA,CAAI,SAAA,CAAU,QAAA,CACZ,QAAA,CAAA,CAAAV,EACCU,eAAAA,CAAC,OAAA,CAAA,CACC,OAAA,CAASF,CAAAA,CACT,SAAA,CAAU,mEAAA,CAET,QAAA,CAAA,CAAAR,CAAAA,CAAM,IAAEI,CAAAA,CAAWO,cAAAA,CAAC,MAAA,CAAA,CAAK,SAAA,CAAU,cAAA,CAAe,QAAA,CAAA,GAAA,CAAC,CAAA,CAAU,IAAA,CAAA,CAChE,EACE,IAAA,CAEJA,cAAAA,CAAC,OAAA,CAAA,CACC,EAAA,CAAIH,CAAAA,CACJ,GAAA,CAAKF,CAAAA,CACL,cAAA,CAAc,CAAC,CAACJ,CAAAA,CAChB,kBAAA,CAAkBO,CAAAA,CAClB,UAAWd,CAAAA,CACT,mHAAA,CACA,oFAAA,CACA,yFAAA,CACAO,GAAS,2DAAA,CACTC,CACF,CAAA,CACA,QAAA,CAAUC,CAAAA,CACT,GAAGC,CAAAA,CACN,CAAA,CAECH,EACCS,cAAAA,CAAC,GAAA,CAAA,CAAE,EAAA,CAAI,CAAA,EAAGH,CAAO,CAAA,MAAA,CAAA,CAAU,SAAA,CAAU,6CAAA,CAClC,SAAAN,CAAAA,CACH,CAAA,CACED,CAAAA,CACFU,cAAAA,CAAC,GAAA,CAAA,CAAE,EAAA,CAAI,CAAA,EAAGH,CAAO,QAAS,SAAA,CAAU,+CAAA,CACjC,QAAA,CAAAP,CAAAA,CACH,EACE,IAAA,CAAA,CACN,CAEJ,CACF,EAEAJ,EAAS,WAAA,CAAc,UAAA","file":"input.cjs","sourcesContent":["export function cn(...classes: Array<string | undefined | null | false>) {\n  return classes.filter(Boolean).join(\" \")\n}\n","\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"./utils/cn\"\n\nexport interface RtwInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string\n  helperText?: string\n  error?: string\n}\n\nexport const RtwInput = React.forwardRef<HTMLInputElement, RtwInputProps>(\n  ({ id, label, helperText, error, className, required, ...props }, ref) => {\n    const autoId = React.useId()\n    const inputId = id ?? autoId\n    const describedBy = error ? `${inputId}-error` : helperText ? `${inputId}-help` : undefined\n\n    return (\n      <div className=\"w-full\">\n        {label ? (\n          <label\n            htmlFor={inputId}\n            className=\"mb-1.5 block text-sm font-medium text-gray-900 dark:text-gray-100\"\n          >\n            {label} {required ? <span className=\"text-red-600\">*</span> : null}\n          </label>\n        ) : null}\n\n        <input\n          id={inputId}\n          ref={ref}\n          aria-invalid={!!error}\n          aria-describedby={describedBy}\n          className={cn(\n            \"block w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 placeholder:text-gray-500\",\n            \"focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500\",\n            \"dark:bg-gray-900 dark:text-gray-100 dark:border-gray-700 dark:placeholder:text-gray-400\",\n            error && \"border-red-500 focus:ring-red-500/40 focus:border-red-500\",\n            className\n          )}\n          required={required}\n          {...props}\n        />\n\n        {error ? (\n          <p id={`${inputId}-error`} className=\"mt-1 text-sm text-red-600 dark:text-red-400\">\n            {error}\n          </p>\n        ) : helperText ? (\n          <p id={`${inputId}-help`} className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n            {helperText}\n          </p>\n        ) : null}\n      </div>\n    )\n  }\n)\n\nRtwInput.displayName = \"RtwInput\"\n"]}